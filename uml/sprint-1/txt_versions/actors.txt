package actors {
    package enemies {
        MonsterType "1" --* "1" Monster
        GiddyMonster --|> Monster
        MarchingMonster --|> Monster
        MuzzyMonster --|> Monster
    }
    Character <|-- Player
    Character <|-- Monster
}

class GiddyMonster {
    --
    constructor, getters, setters
    + void monsterMove(GameMap map)
}

class MarchingMonster {
    --
    constructor, getters, setters
    - void determineFacing()
    + void monsterMove(GameMap map)
}

class MuzzyMonster {
    --
    constructor, getters, setters
    + void monsterMove(GameMap map)
}

abstract class Monster {
    --
    constructor, getters, setters
    + abstract void monsterMove(GameMap map)
    # void attackIfCan(Cell nextCell)
}

enum MonsterType {
    MUZZY
    MARCHING
    GIDDY
}

abstract class Character {
    # Cell cell
    # boolean isPlayer
    - boolean hasMoved
    .. stats ..
    # {static} int maxHealth
    # {static} int defense
    # {static} int attack
    # int health
    --
    constructor, getters, setters
    + void tryMove(int dx, int dy, ArrayList<Item> keys)
    + void move(Cell nextCell)
    + abstract void monsterMove(GameMap map)
    + void attack(Character victim)
    - boolean canGoThrough(Cell cell, ArrayList<Item> keys)

}

class Player {
    - String name
    --
    constructor, getters, setters
    # void attackIfCan(Cell nextCell)
}